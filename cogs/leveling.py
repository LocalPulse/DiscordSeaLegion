import disnake
from disnake.ext import commands
import random
import os
from config import user_data, exp_range, calculate_level
from utils import load_roles, save_roles

class Leveling(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.role_assignments = load_roles()
        self.load_user_data()

    def save_user_data(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª."""
        with open("lvl.txt", "w", encoding="utf-8") as file:
            for user_id, data in user_data.items():
                file.write(f"{user_id}:{data['level']}:{data['xp']}\n")

    def load_user_data(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞."""
        if os.path.exists("lvl.txt"):
            with open("lvl.txt", "r", encoding="utf-8") as file:
                for line in file:
                    parts = line.strip().split(":")
                    if len(parts) == 3:
                        user_id, level, xp = parts
                        user_data[int(user_id)] = {"level": int(level), "xp": int(xp)}

    def assign_role_based_on_level(self, member, new_level):
        """–í—ã–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–æ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∏–≤—è–∑–æ–∫ —É—Ä–æ–≤–Ω—è –∫ —Ä–æ–ª–∏."""
        user_roles = [role.id for role in member.roles]
        assigned_role = None

        for check_role_id, levels in self.role_assignments.items():
            if int(check_role_id) in user_roles:
                assign_role_id = levels.get(str(new_level))
                if assign_role_id:
                    role = disnake.utils.get(member.guild.roles, id=int(assign_role_id))
                    if role and role not in member.roles:
                        return role
        return None

    @commands.Cog.listener()
    async def on_message(self, message):
        if message.author.bot:
            return

        user_id = message.author.id
        if user_id not in user_data:
            user_data[user_id] = {"xp": 0, "level": 1}

        xp_gained = random.randint(exp_range["min"], exp_range["max"])
        user_data[user_id]["xp"] += xp_gained

        new_level = calculate_level(user_data[user_id]["xp"])
        if new_level > user_data[user_id]["level"]:
            user_data[user_id]["level"] = new_level

            await message.channel.send(f"üéâ {message.author.mention} –¥–æ—Å—Ç–∏–≥ {new_level} —É—Ä–æ–≤–Ω—è!")
            role = self.assign_role_based_on_level(message.author, new_level)
            if role:
                await message.author.add_roles(role)
                await message.channel.send(f"üíº {message.author.mention} –ø–æ–ª—É—á–∏–ª –Ω–æ–≤—É—é —Ä–æ–ª—å: **{role.name}**!")

        self.save_user_data()

    @commands.slash_command(description="–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –∏ XP")
    async def rank(self, inter: disnake.ApplicationCommandInteraction):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –∏ –æ–ø—ã—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        user_id = inter.author.id
        user_data_entry = user_data.get(user_id)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –¥–∞–Ω–Ω—ã—Ö
        if user_data_entry:
            level = user_data_entry["level"]
            xp = user_data_entry["xp"]
            xp_needed_for_next_level = (level + 1) ** 3
            xp_progress = xp_needed_for_next_level - xp

            # –°–æ–∑–¥–∞—ë–º Embed
            embed = disnake.Embed(
                title="üèÖ –í–∞—à–∞ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –£—Ä–æ–≤–Ω—è",
                description=f"–ó–¥–µ—Å—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã –≤–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è, {inter.author.mention}!",
                color=disnake.Color.blue()
            )
            embed.set_thumbnail(url=inter.author.avatar.url)

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            embed.add_field(name="üìä –£—Ä–æ–≤–µ–Ω—å", value=f"**{level}**", inline=True)
            embed.add_field(name="üí† –¢–µ–∫—É—â–∏–π XP", value=f"**{xp}**", inline=True)
            embed.add_field(name="üîú XP –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è", value=f"**{xp_progress}**", inline=True)
            embed.add_field(name="üåü –í—Å–µ–≥–æ XP –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è", value=f"**{xp_needed_for_next_level}**",
                            inline=True)

            # –í—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            embed.add_field(name="üóìÔ∏è –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É", value=inter.author.joined_at.strftime("%Y-%m-%d"),
                            inline=True)
            embed.set_footer(text="–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ–±—â–∞—Ç—å—Å—è, —á—Ç–æ–±—ã –ø–æ–≤—ã—à–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å!", icon_url=self.bot.user.avatar.url)

            await inter.response.send_message(embed=embed)

        else:
            await inter.response.send_message(
                f"{inter.author.mention}, —É –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç XP. –ù–∞—á–Ω–∏—Ç–µ –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å XP!"
            )

    @commands.command(name="set_exp_range", help="–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø—ã—Ç–∞ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è")
    @commands.has_permissions(administrator=True)
    async def set_exp_range(self, ctx, min_exp: int = None, max_exp: int = None):
        """–ö–æ–º–∞–Ω–¥–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø—ã—Ç–∞."""
        if min_exp is None or max_exp is None:
            await ctx.send(
                "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —É–∫–∞–∑–∞–ª–∏ –æ–±–∞ –∑–Ω–∞—á–µ–Ω–∏—è.\n\n"
                "**–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã:** `!set_exp_range <min_exp> <max_exp>`\n"
                "üîπ `min_exp` - –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ–ø—ã—Ç–∞ (—Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ)\n"
                "üîπ `max_exp` - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ–ø—ã—Ç–∞ (—Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ)"
            )
            return

        if min_exp < 0 or max_exp < 0:
            await ctx.send("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ–ø—ã—Ç –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏.")
            return

        if min_exp > max_exp:
            await ctx.send("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ–ø—ã—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ.")
            return

        exp_range["min"] = min_exp
        exp_range["max"] = max_exp
        await ctx.send(f"üîß –î–∏–∞–ø–∞–∑–æ–Ω –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø—ã—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: –æ—Ç {min_exp} –¥–æ {max_exp} –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")

    def cog_unload(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ cog."""
        self.save_user_data()


def setup(bot):
    bot.add_cog(Leveling(bot))