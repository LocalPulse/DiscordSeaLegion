import disnake
from disnake.ext import commands
import random
import os
import json
from config import user_data, exp_range, calculate_level
from utils import load_roles, save_roles

CHANNELS_FILE = "channels.json"
VOICE_TIME_FILE = "voice_time_data.json"

level_up_channels = {}

class Leveling(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.role_assignments = load_roles()
        self.load_user_data()
        self.load_level_up_channels()

    def save_user_data(self):
        with open("lvl.txt", "w", encoding="utf-8") as file:
            for user_id, data in user_data.items():
                file.write(f"{user_id}:{data['level']}:{data['xp']}\n")

    def load_user_data(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞."""
        if os.path.exists("lvl.txt"):
            with open("lvl.txt", "r", encoding="utf-8") as file:
                for line in file:
                    parts = line.strip().split(":")
                    if len(parts) == 3:
                        user_id, level, xp = parts
                        user_data[int(user_id)] = {"level": int(level), "xp": int(xp)}

    def load_level_up_channels(self):
        if os.path.exists(CHANNELS_FILE):
            try:
                with open(CHANNELS_FILE, "r", encoding="utf-8") as file:
                    global level_up_channels
                    level_up_channels = json.load(file)
            except json.JSONDecodeError:
                print("[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ JSON —Ñ–∞–π–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤.")
                level_up_channels = {}
        else:
            level_up_channels = {}

    def load_voice_time_data(self):
        if os.path.exists(VOICE_TIME_FILE):
            try:
                with open(VOICE_TIME_FILE, "r", encoding="utf-8") as file:
                    return json.load(file)
            except json.JSONDecodeError:
                print("[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ JSON —Ñ–∞–π–ª–∞ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å.")
                return {}
        else:
            print("[INFO] –§–∞–π–ª voice_time_data.json –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–µ—Ç—Å—è –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å.")
            return {}

    def save_level_up_channels(self):
        try:
            with open(CHANNELS_FILE, "w", encoding="utf-8") as file:
                json.dump(level_up_channels, file, indent=4)
        except Exception as e:
            print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞–Ω–∞–ª–æ–≤: {e}")

    def assign_role_based_on_level(self, member, new_level):
        user_roles = [role.id for role in member.roles]
        assigned_role = None

        for check_role_id, levels in self.role_assignments.items():
            if int(check_role_id) in user_roles:
                assign_role_id = levels.get(str(new_level))
                if assign_role_id:
                    role = disnake.utils.get(member.guild.roles, id=int(assign_role_id))
                    if role and role not in member.roles:
                        return role
        return None

    async def send_message_to_channel(self, channel, message):
        try:
            await channel.send(message)
        except Exception as e:
            print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    @commands.Cog.listener()
    async def on_message(self, message):
        if message.author.bot:
            return

        user_id = message.author.id
        if user_id not in user_data:
            user_data[user_id] = {"xp": 0, "level": 1}

        xp_gained = random.randint(exp_range["min"], exp_range["max"])
        user_data[user_id]["xp"] += xp_gained

        new_level = calculate_level(user_data[user_id]["xp"])
        if new_level > user_data[user_id]["level"]:
            user_data[user_id]["level"] = new_level

            level_up_message = f"üéâ {message.author.mention} –¥–æ—Å—Ç–∏–≥ {new_level} —É—Ä–æ–≤–Ω—è!"
            role = self.assign_role_based_on_level(message.author, new_level)
            if role:
                level_up_message += f"\nüíº {message.author.mention} –ø–æ–ª—É—á–∏–ª –Ω–æ–≤—É—é —Ä–æ–ª—å: **{role.name}**!"
                await message.author.add_roles(role)

            guild_id = message.guild.id
            if guild_id in level_up_channels:
                level_up_channel = self.bot.get_channel(level_up_channels[guild_id])
                if level_up_channel:
                    await self.send_message_to_channel(level_up_channel, level_up_message)
                else:
                    await self.send_message_to_channel(message.channel, level_up_message)
            else:
                await self.send_message_to_channel(message.channel, level_up_message)

        self.save_user_data()

    @commands.slash_command(description="–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—à —É—Ä–æ–≤–µ–Ω—å, XP –∏ –≤—Ä–µ–º—è –≤ –≥–æ–ª–æ—Å–µ")
    async def rank(self, inter: disnake.ApplicationCommandInteraction):
        user_id = inter.author.id
        user_data_entry = user_data.get(user_id)

        voice_time_data = self.load_voice_time_data()
        total_voice_time = voice_time_data.get(str(user_id), 0)

        if user_data_entry:
            level = user_data_entry["level"]
            xp = user_data_entry["xp"]
            xp_needed_for_next_level = (level + 1) ** 100
            xp_progress = xp_needed_for_next_level - xp

            embed = disnake.Embed(
                title="üèÖ –í–∞—à–∞ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –£—Ä–æ–≤–Ω—è",
                description=f"–ó–¥–µ—Å—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã –≤–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è, {inter.author.mention}!",
                color=disnake.Color.blue()
            )
            embed.set_thumbnail(url=inter.author.avatar.url)

            embed.add_field(name="üìä –£—Ä–æ–≤–µ–Ω—å", value=f"**{level}**", inline=True)
            embed.add_field(name="üí† –¢–µ–∫—É—â–∏–π XP", value=f"**{xp}**", inline=True)
            embed.add_field(name="üîú XP –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è", value=f"**{xp_progress}**", inline=True)
            embed.add_field(name="üåü –í—Å–µ–≥–æ XP –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è", value=f"**{xp_needed_for_next_level}**",
                            inline=True)

            hours, minutes = divmod(total_voice_time, 60)
            embed.add_field(name="üïí –û–±—â–µ–µ –≤—Ä–µ–º—è –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ", value=f"**{hours} —á {minutes} –º–∏–Ω**", inline=True)
            embed.add_field(name="üóìÔ∏è –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É", value=inter.author.joined_at.strftime("%Y-%m-%d"),
                            inline=True)
            embed.set_footer(text="–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ–±—â–∞—Ç—å—Å—è, —á—Ç–æ–±—ã –ø–æ–≤—ã—à–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å!", icon_url=self.bot.user.avatar.url)

            await inter.response.send_message(embed=embed)

        else:
            await inter.response.send_message(
                f"{inter.author.mention}, —É –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç XP. –ù–∞—á–Ω–∏—Ç–µ –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å XP!")

    @commands.slash_command(description="–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –æ–ø—ã—Ç—É")
    async def leaderboard(self, inter: disnake.ApplicationCommandInteraction):

        if not user_data:
            await inter.response.send_message("üìâ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–º –æ–ø—ã—Ç–æ–º.")
            return

        sorted_users = sorted(user_data.items(), key=lambda x: x[1]['xp'], reverse=True)

        embed = disnake.Embed(
            title="üèÜ –¢–∞–±–ª–∏—Ü–∞ –õ–∏–¥–µ—Ä–æ–≤ –ø–æ –û–ø—ã—Ç—É",
            description="–¢–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –æ–ø—ã—Ç–∞!",
            color=disnake.Color.gold()
        )

        embed.set_thumbnail(url=self.bot.user.avatar.url)

        for rank, (user_id, data) in enumerate(sorted_users[:10], start=1):
            member = inter.guild.get_member(user_id)
            if member:
                embed.add_field(
                    name=f"{rank}. {member.display_name}",
                    value=f"**–£—Ä–æ–≤–µ–Ω—å:** {data['level']} | **–û–ø—ã—Ç (XP):** {data['xp']}",
                    inline=False
                )

        await inter.response.send_message(embed=embed)

    @commands.command(name="leaderboard", description="–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –æ–ø—ã—Ç—É")
    async def leaderboard(self, ctx):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –æ–ø—ã—Ç—É."""

        if not user_data:
            await ctx.send("üìâ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–º –æ–ø—ã—Ç–æ–º.")
            return

        sorted_users = sorted(user_data.items(), key=lambda x: x[1]['xp'], reverse=True)

        embed = disnake.Embed(
            title="üèÜ –¢–∞–±–ª–∏—Ü–∞ –õ–∏–¥–µ—Ä–æ–≤ –ø–æ –û–ø—ã—Ç—É",
            description="–¢–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –æ–ø—ã—Ç–∞!",
            color=disnake.Color.gold()
        )

        embed.set_thumbnail(url=self.bot.user.avatar.url)

        for rank, (user_id, data) in enumerate(sorted_users[:10], start=1):
            member = ctx.guild.get_member(user_id)
            if member:
                embed.add_field(
                    name=f"{rank}. {member.display_name}",
                    value=f"**–£—Ä–æ–≤–µ–Ω—å:** {data['level']} | **–û–ø—ã—Ç (XP):** {data['xp']}",
                    inline=False
                )

        await ctx.send(embed=embed)

    @commands.command(name="set_exp_range")
    @commands.has_permissions(administrator=True)
    async def set_exp_range(self, ctx, min_exp: int = None, max_exp: int = None):
        if min_exp is None or max_exp is None:
            await ctx.send(
                "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —É–∫–∞–∑–∞–ª–∏ –æ–±–∞ –∑–Ω–∞—á–µ–Ω–∏—è.\n\n"
                "**–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã:** `!set_exp_range <min_exp> <max_exp>`\n"
                "üîπ `min_exp` - –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ–ø—ã—Ç–∞ (—Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ)\n"
                "üîπ `max_exp` - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ–ø—ã—Ç–∞ (—Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ)"
            )
            return

        if min_exp < 0 or max_exp < 0:
            await ctx.send("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ–ø—ã—Ç –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏.")
            return

        if min_exp > max_exp:
            await ctx.send("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ–ø—ã—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ.")
            return

        exp_range["min"] = min_exp
        exp_range["max"] = max_exp
        await ctx.send(f"üîß –î–∏–∞–ø–∞–∑–æ–Ω –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø—ã—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: –æ—Ç {min_exp} –¥–æ {max_exp} –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")

    @commands.command(name="set_channel")
    @commands.has_permissions(administrator=True)
    async def set_channel(self, ctx, channel: disnake.TextChannel = None):
        if channel is None:
            await ctx.send(
                "‚ö†Ô∏è –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –∫–∞–Ω–∞–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª, –≥–¥–µ –±–æ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è.\n"
                "–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: `!set_channel #–∫–∞–Ω–∞–ª`"
            )
            return

        if not isinstance(channel, disnake.TextChannel):
            await ctx.send(
                "Ô∏è‚ö†Ô∏è –£–∫–∞–∑–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–≤—ã–º –∫–∞–Ω–∞–ª–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª.\n"
                "–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: `!set_channel #–∫–∞–Ω–∞–ª`"
            )
            return

        guild_id = ctx.guild.id
        level_up_channels[guild_id] = channel.id
        self.save_level_up_channels()

        await ctx.send(f"‚úÖ –ö–∞–Ω–∞–ª –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π —É—Ä–æ–≤–Ω—è –Ω–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {channel.mention}")


def setup(bot):
    bot.add_cog(Leveling(bot))