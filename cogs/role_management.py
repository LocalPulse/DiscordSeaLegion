import disnake
from disnake.ext import commands
from config import user_data, calculate_level
from utils import load_roles, save_roles


class RoleManagement(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.role_assignments = load_roles()

    @commands.command()
    @commands.has_permissions(administrator=True)
    async def set_roles(self, ctx, check_role_id: int = None, level: int = None, assign_role_id: int = None):
        if not all([check_role_id, level, assign_role_id]):
            await ctx.send(
                "‚ö†Ô∏è **–û—à–∏–±–∫–∞:** –í—Å–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "`sl.set_roles <ID —Ä–æ–ª–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏> <–£—Ä–æ–≤–µ–Ω—å> <ID –≤—ã–¥–∞–≤–∞–µ–º–æ–π —Ä–æ–ª–∏>`\n\n"
                "**–ü—Ä–∏–º–µ—Ä:** `sl.set_roles 1306206217110290485 5 1306207277438472202`"
            )
            return

        if level <= 0:
            await ctx.send("‚ö†Ô∏è **–û—à–∏–±–∫–∞:** –£—Ä–æ–≤–µ–Ω—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å.")
            return

        if str(check_role_id) not in self.role_assignments:
            self.role_assignments[str(check_role_id)] = {}

        self.role_assignments[str(check_role_id)][str(level)] = str(assign_role_id)
        save_roles(self.role_assignments)

        await ctx.send(
            f"‚úÖ **–£—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ:** –¢–µ–ø–µ—Ä—å —Ä–æ–ª—å <@&{assign_role_id}> –±—É–¥–µ—Ç –≤—ã–¥–∞–Ω–∞ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ —Ä–æ–ª–∏ <@&{check_role_id}> "
            f"–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è {level}. \n \n"
            f"üéñÔ∏è –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö —Ä–æ–ª–µ–π –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É `sl.show_roles`"
        )

    @commands.command()
    @commands.has_permissions(administrator=True)
    async def edit_rank(self, ctx, user: disnake.Member = None, *, args: str = None):
        """–ü–æ–∑–≤–æ–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å –∏–ª–∏ XP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""

        if not user:
            await ctx.send(
                "‚ö†Ô∏è **–û—à–∏–±–∫–∞:** –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü—Ä–∏–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã: `sl.edit_rank @User 10` –∏–ª–∏ `sl.edit_rank @User xp=200`."
            )
            return

        if user.id not in user_data:
            user_data[user.id] = {"xp": 0, "level": 1}

        level = None
        xp = None

        if args:
            # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
            arg_parts = args.split()
            for part in arg_parts:
                if part.startswith("xp="):
                    try:
                        xp = int(part.split("=")[1])
                    except ValueError:
                        await ctx.send(f"‚ö†Ô∏è **–û—à–∏–±–∫–∞:** –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è XP: {part.split('=')[1]}.")
                        return
                elif part.isdigit():
                    level = int(part)
                else:
                    await ctx.send(f"‚ö†Ô∏è **–û—à–∏–±–∫–∞:** –ù–µ–≤–µ—Ä–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç: {part}.")
                    return

        if level is not None:
            if level <= 0:
                await ctx.send("‚ö†Ô∏è **–û—à–∏–±–∫–∞:** –£—Ä–æ–≤–µ–Ω—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.")
                return
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—É–± —É—Ä–æ–≤–Ω—è –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Ç—Ä–µ–±—É–µ–º–æ–≥–æ –æ–ø—ã—Ç–∞
            xp_for_level = level ** 3
            user_data[user.id]["level"] = level
            user_data[user.id]["xp"] = xp_for_level
        elif xp is not None:
            if xp < 0:
                await ctx.send("‚ö†Ô∏è **–û—à–∏–±–∫–∞:** –û–ø—ã—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
                return
            user_data[user.id]["xp"] = xp
            user_data[user.id]["level"] = calculate_level(xp)
        else:
            await ctx.send("‚ö†Ô∏è **–û—à–∏–±–∫–∞:** –£–∫–∞–∂–∏—Ç–µ –ª–∏–±–æ —É—Ä–æ–≤–µ–Ω—å, –ª–∏–±–æ –æ–ø—ã—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
            return

        new_level = user_data[user.id]["level"]
        new_xp = user_data[user.id]["xp"]

        user_roles = [role.id for role in user.roles]
        assigned_roles = []
        roles_to_remove = []

        for check_role_id, levels in self.role_assignments.items():
            if int(check_role_id) in user_roles:
                for lvl, assign_role_id in levels.items():
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–æ–ª—å –Ω–∏–∂–µ —É—Ä–æ–≤–Ω—è
                    role = disnake.utils.get(ctx.guild.roles, id=int(assign_role_id))

                    # –ï—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –Ω–∏–∂–µ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è, –¥–æ–±–∞–≤–ª—è–µ–º —Ä–æ–ª—å –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
                    if role and int(lvl) <= new_level:
                        if role not in user.roles:
                            await user.add_roles(role)
                            assigned_roles.append(role)
                    elif role and role in user.roles and int(lvl) > new_level:
                        roles_to_remove.append(role)

        for role in roles_to_remove:
            if role and role in user.roles:
                await user.remove_roles(role)

        if assigned_roles:
            role_names = ", ".join([role.name for role in assigned_roles])
            await ctx.send(
                f"‚úÖ {user.mention} –ø–æ–ª—É—á–∏–ª —Ä–æ–ª–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —É—Ä–æ–≤–Ω–µ–º {new_level} –∏ –Ω–∏–∂–µ: **{role_names}**."
            )
        else:
            await ctx.send(f"‚ÑπÔ∏è –î–ª—è {user.mention} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–æ–ª–µ–π –¥–ª—è —É—Ä–æ–≤–Ω—è {new_level} –∏ –Ω–∏–∂–µ.")

        await ctx.send(
            f"üìà **–£—Ä–æ–≤–µ–Ω—å –∏ –æ–ø—ã—Ç –æ–±–Ω–æ–≤–ª–µ–Ω—ã:**\n"
            f"{user.mention} ‚Äî **–£—Ä–æ–≤–µ–Ω—å:** {new_level}, **XP:** {new_xp}"
        )

    @commands.command()
    @commands.has_permissions(administrator=True)
    async def show_roles(self, ctx):
        if not self.role_assignments:
            await ctx.send("üéñÔ∏è –ü—Ä–∏–≤—è–∑–∫–∏ —Ä–æ–ª–µ–π –∫ —É—Ä–æ–≤–Ω—è–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return

        embed = disnake.Embed(
            title="‚öîÔ∏è –ü–†–ò–í–Ø–ó–ö–ò –†–û–õ–ï–ô –ö –£–†–û–í–ù–Ø–ú",
            description="üîπ **–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –ø—Ä–∏–≤—è–∑–∫–µ —Ä–æ–ª–µ–π –∫ —É—Ä–æ–≤–Ω—è–º** üîπ",
            color=disnake.Color.blue()
        )
        embed.set_thumbnail(url=self.bot.user.avatar.url)

        for check_role_id, levels in self.role_assignments.items():
            role = disnake.utils.get(ctx.guild.roles, id=int(check_role_id))
            role_name = role.name if role else f"ID: {check_role_id}"

            level_info = ""
            for level, assign_role_id in sorted(levels.items(), key=lambda x: int(x[0])):
                assign_role = disnake.utils.get(ctx.guild.roles, id=int(assign_role_id))
                assign_role_name = assign_role.name if assign_role else f"ID: {assign_role_id}"
                level_info += f" --- **–£—Ä–æ–≤–µ–Ω—å {level}** ‚Üí {assign_role_name} *(ID: {assign_role_id})*\n"

            embed.add_field(
                name=f"üéñÔ∏è –†–æ–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: **{role_name}** *(ID: {check_role_id})*",
                value=level_info,
                inline=False
            )

        embed.set_footer(text="–ü—Ä–∏–≤—è–∑–∫–∏ —Ä–æ–ª–µ–π –∫ —É—Ä–æ–≤–Ω—è–º SEA LEGION")
        await ctx.send(embed=embed)


def setup(bot):
    bot.add_cog(RoleManagement(bot))